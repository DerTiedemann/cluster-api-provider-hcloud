package(default_visibility = ["//visibility:public"])

load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")

go_library(
    name = "go_default_library",
    srcs = ["yaml2json.go"],
    importpath = "github.com/simonswine/cluster-api-provider-hetzner/hack",
    visibility = ["//visibility:private"],
    deps = ["@com_github_bronze1man_yaml2json//y2jLib:go_default_library"],
)

go_binary(
    name = "hack",
    embed = [":go_default_library"],
    visibility = ["//visibility:public"],
)

GAZELLE = "@bazel_gazelle//cmd/gazelle"

KAZEL = "@io_k8s_repo_infra//cmd/kazel"

GO = "@go_sdk//:bin/go"

GOFMT = "@go_sdk//:bin/gofmt"

CONTROLLER_GEN = "@io_k8s_sigs_controller_tools//cmd/controller-gen"

sh_library(
    name = "lib",
    srcs = glob(["lib/*.sh"]),
)

# Bazel file generation rules
sh_binary(
    name = "update-bazel",
    srcs = ["bazel.sh"],
    args = [
        "update",
        "$(location %s)" % GAZELLE,
        "$(location %s)" % KAZEL,
    ],
    data = [
        ":lib",
        GAZELLE,
        KAZEL,
    ],
)

sh_test(
    name = "verify-bazel",
    srcs = ["bazel.sh"],
    args = [
        "verify",
        "$(location %s)" % GAZELLE,
        "$(location %s)" % KAZEL,
    ],
    data = [
        ":lib",
        "@//:all-srcs",
        GAZELLE,
        KAZEL,
    ],
)

sh_binary(
    name = "update-deps",
    srcs = ["update-deps.sh"],
    args = [
        "$(location %s)" % GO,
        "$(location %s)" % GAZELLE,
        "$(location %s)" % KAZEL,
        "$(location :update-bazel)",
    ],
    data = [
        GAZELLE,
        GO,
        KAZEL,
        ":update-bazel",
    ],
)

# Gofmt rules
sh_binary(
    name = "update-gofmt",
    srcs = ["update-gofmt.sh"],
    args = [
        "$(location %s)" % GOFMT,
    ],
    data = [
        GOFMT,
    ],
)

sh_test(
    name = "verify-gofmt",
    srcs = ["verify-gofmt.sh"],
    args = [
        "$(location %s)" % GOFMT,
    ],
    data = [
        GOFMT,
        "@//:all-srcs",
    ],
)

# CRD code + manifest generation
sh_binary(
    name = "update-crds",
    srcs = ["crds.sh"],
    args = [
        "update",
        "$(location %s)" % GO,
        "$(location %s)" % CONTROLLER_GEN,
    ],
    data = [
        ":lib",
        GO,
        CONTROLLER_GEN,
    ],
)

sh_test(
    name = "verify-crds",
    srcs = ["crds.sh"],
    args = [
        "verify",
        "$(location %s)" % GO,
        "$(location %s)" % CONTROLLER_GEN,
    ],
    data = [
        ":lib",
        GO,
        CONTROLLER_GEN,
        "@//:all-srcs",
    ],
)

filegroup(
    name = "package-srcs",
    srcs = glob(["**"]),
    tags = ["automanaged"],
    visibility = ["//visibility:private"],
)

filegroup(
    name = "all-srcs",
    srcs = [
        ":package-srcs",
        "//hack/build:all-srcs",
    ],
    tags = ["automanaged"],
    visibility = ["//visibility:public"],
)
